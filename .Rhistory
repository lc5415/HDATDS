##       Output from this file: Processed covariates, only with entries        ##
##          relevant to CVD[covProcessed.rds], Biomarkers dataset with         ##
##                   well labelled columns and only one entry                  ##
##                  over time (not imputed)[bioProcessed.rds],                 ##
##                     same biomarkers dataset but imputed                     ##
##          through MICE imputation[bioImputed.rds], biomarker dataset         ##
##                   with only complete cases [bioMCAR.rds],                   ##
##   biomarker preprocessed with all columns (30 columns)[bioUnfiltered.rds]   ##
#################################################################################
###########################################################################
###########################################################################
###                                                                     ###
###                         PACKAGE DECLARATION                         ###
###                                                                     ###
###########################################################################
###########################################################################
if (!require(devtools)) install.packages('devtools')
library(devtools)
if (!require(remotes)) install.packages('remotes')
library(remotes)
if (!require(ggbiplot)) install_github("vqv/ggbiplot")
library(ggbiplot)
if (!require(GGally)) install_github("GGally")
library(GGally)
if (!require(tidyverse)) install.packagaes("tidyverse")
library(tidyverse)
if (!require(naniar)) install.packages("naniar")
library(naniar)
if (!require(factoextra)) install.packages("factoextra")
library(factoextra)
if (!require(ggfortify)) install.packages("ggfortify")
library(ggfortify)
if (!require(stats)) install.packages("stats")
library(stats)
if (!require(mice)) install.packages('mice')
library(mice)
if (!require(DMwR)) install.packages('DMwR')
library(DMwR)
if (!require(impute)) BiocManager::install("impute")
library(impute)
library(parallel)
cores = detectCores()
############################################################################
############################################################################
###                                                                      ###
###                             DATA LOADING                             ###
###                                                                      ###
############################################################################
############################################################################
##################################################################
##                        Cluster add-in                        ##
##################################################################
cluster = 1
t0 = Sys.time()
platform = Sys.info()['sysname']
if (cluster == 1 & platform == "Linux"){
cov.original = readRDS("../FULLDATA/Covariates_full.rds")
bio.original= readRDS("../FULLDATA/Biomarkers_full.rds")
bio.dict = readxl::read_xlsx("../Biomarker_annotation.xlsx")
cov.dict = readxl::read_xlsx("../Covariate_dictionary.xlsx")
snp.original = readRDS('../FULLDATA/genetic_data_cvd_snps.rds')
snp_info.original = readxl::read_xlsx("../SNP_info.xlsx")
# id's into columnss, not doing this anymore
# rownames(bio.original) = bio.original$`mydata$eid`
# bio.original = bio.original[,-1]
# setting up ID column
colnames(bio.original)[1] = 'ID'
cov.original = cbind(ID = rownames(cov.original), cov.original)
snp.original = cbind(ID = rownames(snp.original), snp.original)
cov.original$ID = as.numeric(levels(cov.original$ID)[cov.original$ID])
snp.original$ID = as.numeric(levels(snp.original$ID)[snp.original$ID])
save_path = "../FULLDATA/preprocessed/"
} else {
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#################################################################
##                      Original datasets                      ##
#################################################################
cov.original = readRDS("../data/Covars_toy.rds")
bio.original= readRDS("../data/Biomarkers_toy.rds")
bio.dict = readxl::read_xlsx("../Biomarker_annotation.xlsx")
cov.dict = readxl::read_xlsx("../Covariate_dictionary.xlsx")
snp.original = readRDS('../data/Genes_toy.rds')
snp_info.original = readxl::read_xlsx("../SNP_info.xlsx")
bio.original = cbind(ID = 1:nrow(bio.original), bio.original)
cov.original = cbind(ID = 1:nrow(cov.original), cov.original)
snp.original = cbind(ID = 1:nrow(snp.original), snp.original)
save_path = "../data/preprocessed/"
}
##################################################################
##              Changing biomarkers codes by names              ##
##################################################################
#make nicely looking names (programmingly functional)
colnames(bio.dict) = make.names(colnames(bio.dict), unique=TRUE)
#get column numbers of columns with name containing pattern *(.)1(.)*
# use (.) to match the dot as opposed to using . as a wildcard
bio = bio.original[,c(T, !grepl("*(.)1(.)0", colnames(bio.original)[-1]))]
colnames(bio)[-1] = bio.dict$Biomarker.name[
match(substring(colnames(bio)[-1],2,6),bio.dict$UK.Biobank.Field)]
View(bio)
# This file will only include preprocessing of the original datasets and their respective storage
####################################################################
##  Input this file: Original covariates data set (37 columns),   ##
##   Original biomarkers(60 columns), Biomarker annotation file,  ##
##         Covariate dictionary, SNP dataset, SNP info file       ##
####################################################################
#################################################################################
##       Output from this file: Processed covariates, only with entries        ##
##          relevant to CVD[covProcessed.rds], Biomarkers dataset with         ##
##                   well labelled columns and only one entry                  ##
##                  over time (not imputed)[bioProcessed.rds],                 ##
##                     same biomarkers dataset but imputed                     ##
##          through MICE imputation[bioImputed.rds], biomarker dataset         ##
##                   with only complete cases [bioMCAR.rds],                   ##
##   biomarker preprocessed with all columns (30 columns)[bioUnfiltered.rds]   ##
#################################################################################
###########################################################################
###########################################################################
###                                                                     ###
###                         PACKAGE DECLARATION                         ###
###                                                                     ###
###########################################################################
###########################################################################
if (!require(devtools)) install.packages('devtools')
library(devtools)
if (!require(remotes)) install.packages('remotes')
library(remotes)
if (!require(ggbiplot)) install_github("vqv/ggbiplot")
library(ggbiplot)
if (!require(GGally)) install_github("GGally")
library(GGally)
if (!require(tidyverse)) install.packagaes("tidyverse")
library(tidyverse)
if (!require(naniar)) install.packages("naniar")
library(naniar)
if (!require(factoextra)) install.packages("factoextra")
library(factoextra)
if (!require(ggfortify)) install.packages("ggfortify")
library(ggfortify)
if (!require(stats)) install.packages("stats")
library(stats)
if (!require(mice)) install.packages('mice')
library(mice)
if (!require(DMwR)) install.packages('DMwR')
library(DMwR)
if (!require(impute)) BiocManager::install("impute")
library(impute)
library(parallel)
cores = detectCores()
############################################################################
############################################################################
###                                                                      ###
###                             DATA LOADING                             ###
###                                                                      ###
############################################################################
############################################################################
##################################################################
##                        Cluster add-in                        ##
##################################################################
cluster = 1
t0 = Sys.time()
platform = Sys.info()['sysname']
if (cluster == 1 & platform == "Linux"){
cov.original = readRDS("../FULLDATA/Covariates_full.rds")
bio.original= readRDS("../FULLDATA/Biomarkers_full.rds")
bio.dict = readxl::read_xlsx("../Biomarker_annotation.xlsx")
cov.dict = readxl::read_xlsx("../Covariate_dictionary.xlsx")
snp.original = readRDS('../FULLDATA/genetic_data_cvd_snps.rds')
snp_info.original = readxl::read_xlsx("../SNP_info.xlsx")
# id's into columnss, not doing this anymore
# rownames(bio.original) = bio.original$`mydata$eid`
# bio.original = bio.original[,-1]
# setting up ID column
colnames(bio.original)[1] = 'ID'
cov.original = cbind(ID = rownames(cov.original), cov.original)
snp.original = cbind(ID = rownames(snp.original), snp.original)
cov.original$ID = as.numeric(levels(cov.original$ID)[cov.original$ID])
snp.original$ID = as.numeric(levels(snp.original$ID)[snp.original$ID])
save_path = "../FULLDATA/preprocessed/"
} else {
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#################################################################
##                      Original datasets                      ##
#################################################################
cov.original = readRDS("../data/Covars_toy.rds")
bio.original= readRDS("../data/Biomarkers_toy.rds")
bio.dict = readxl::read_xlsx("../Biomarker_annotation.xlsx")
cov.dict = readxl::read_xlsx("../Covariate_dictionary.xlsx")
snp.original = readRDS('../data/Genes_toy.rds')
snp_info.original = readxl::read_xlsx("../SNP_info.xlsx")
bio.original = cbind(ID = 1:nrow(bio.original), bio.original)
cov.original = cbind(ID = 1:nrow(cov.original), cov.original)
snp.original = cbind(ID = 1:nrow(snp.original), snp.original)
save_path = "../data/preprocessed/"
}
##################################################################
##################################################################
##              Changing biomarkers codes by names              ##
##################################################################
#make nicely looking names (programmingly functional)
colnames(bio.dict) = make.names(colnames(bio.dict), unique=TRUE)
View(bio)
# This file will only include preprocessing of the original datasets and their respective storage
####################################################################
##  Input this file: Original covariates data set (37 columns),   ##
##   Original biomarkers(60 columns), Biomarker annotation file,  ##
##         Covariate dictionary, SNP dataset, SNP info file       ##
####################################################################
#################################################################################
##       Output from this file: Processed covariates, only with entries        ##
##          relevant to CVD[covProcessed.rds], Biomarkers dataset with         ##
##                   well labelled columns and only one entry                  ##
##                  over time (not imputed)[bioProcessed.rds],                 ##
##                     same biomarkers dataset but imputed                     ##
##          through MICE imputation[bioImputed.rds], biomarker dataset         ##
##                   with only complete cases [bioMCAR.rds],                   ##
##   biomarker preprocessed with all columns (30 columns)[bioUnfiltered.rds]   ##
#################################################################################
###########################################################################
###########################################################################
###                                                                     ###
###                         PACKAGE DECLARATION                         ###
###                                                                     ###
###########################################################################
###########################################################################
if (!require(devtools)) install.packages('devtools')
library(devtools)
if (!require(remotes)) install.packages('remotes')
library(remotes)
if (!require(ggbiplot)) install_github("vqv/ggbiplot")
library(ggbiplot)
if (!require(GGally)) install_github("GGally")
library(GGally)
if (!require(tidyverse)) install.packagaes("tidyverse")
library(tidyverse)
if (!require(naniar)) install.packages("naniar")
library(naniar)
if (!require(factoextra)) install.packages("factoextra")
library(factoextra)
if (!require(ggfortify)) install.packages("ggfortify")
library(ggfortify)
if (!require(stats)) install.packages("stats")
library(stats)
if (!require(mice)) install.packages('mice')
library(mice)
if (!require(DMwR)) install.packages('DMwR')
library(DMwR)
if (!require(impute)) BiocManager::install("impute")
library(impute)
library(parallel)
cores = detectCores()
############################################################################
############################################################################
###                                                                      ###
###                             DATA LOADING                             ###
###                                                                      ###
############################################################################
############################################################################
##################################################################
##                        Cluster add-in                        ##
##################################################################
cluster = 1
t0 = Sys.time()
platform = Sys.info()['sysname']
if (cluster == 1 & platform == "Linux"){
cov.original = readRDS("../FULLDATA/Covariates_full.rds")
bio.original= readRDS("../FULLDATA/Biomarkers_full.rds")
bio.dict = readxl::read_xlsx("../Biomarker_annotation.xlsx")
cov.dict = readxl::read_xlsx("../Covariate_dictionary.xlsx")
snp.original = readRDS('../FULLDATA/genetic_data_cvd_snps.rds')
snp_info.original = readxl::read_xlsx("../SNP_info.xlsx")
# id's into columnss, not doing this anymore
# rownames(bio.original) = bio.original$`mydata$eid`
# bio.original = bio.original[,-1]
# setting up ID column
colnames(bio.original)[1] = 'ID'
cov.original = cbind(ID = rownames(cov.original), cov.original)
snp.original = cbind(ID = rownames(snp.original), snp.original)
cov.original$ID = as.numeric(levels(cov.original$ID)[cov.original$ID])
snp.original$ID = as.numeric(levels(snp.original$ID)[snp.original$ID])
save_path = "../FULLDATA/preprocessed/"
} else {
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#################################################################
##                      Original datasets                      ##
#################################################################
cov.original = readRDS("../data/Covars_toy.rds")
bio.original= readRDS("../data/Biomarkers_toy.rds")
bio.dict = readxl::read_xlsx("../Biomarker_annotation.xlsx")
cov.dict = readxl::read_xlsx("../Covariate_dictionary.xlsx")
snp.original = readRDS('../data/Genes_toy.rds')
snp_info.original = readxl::read_xlsx("../SNP_info.xlsx")
bio.original = cbind(ID = 1:nrow(bio.original), bio.original)
cov.original = cbind(ID = 1:nrow(cov.original), cov.original)
snp.original = cbind(ID = 1:nrow(snp.original), snp.original)
save_path = "../data/preprocessed/"
}
##################################################################
##################################################################
##              Changing biomarkers codes by names              ##
##################################################################
#make nicely looking names (programmingly functional)
colnames(bio.dict) = make.names(colnames(bio.dict), unique=TRUE)
View(bio.original)
#get column numbers of columns with name containing pattern *(.)1(.)*
# use (.) to match the dot as opposed to using . as a wildcard
bio = bio.original[,c(T, !grepl("*(.)1(.)0", colnames(bio.original)[-1]))]
View(bio)
colnames(bio)[-1] = bio.dict$Biomarker.name[
match(substring(colnames(bio)[-1],2,6),bio.dict$UK.Biobank.Field)]
colnames(bio)[-1] = make.names(colnames(bio)[-1], unique=TRUE)
colnames(bio)[-1] = sub("\\.\\.",".", colnames(bio)[-1])
# safety-check for all vars being numeric
stopifnot(all(apply(bio, 2, is.numeric)))
colnames(bio)
HDATDS::bio.dict
all(colnames(bio)[-1]==HDATDS::bio.dict$`Biomarker name`)
all(colnames(bio)[-1]%in%HDATDS::bio.dict$`Biomarker name`)
setwd("~/OneDrive - Imperial College London/ExtratimeWork/HDATDS")
devtools::document()
devtools::document()
devtools::load_all()
renameBio(bio.original)
colnames(renameBio(bio.original))
View(bio.original)
HDATDS::bio.original
HDATDS::bio.example
# This file will only include preprocessing of the original datasets and their respective storage
####################################################################
##  Input this file: Original covariates data set (37 columns),   ##
##   Original biomarkers(60 columns), Biomarker annotation file,  ##
##         Covariate dictionary, SNP dataset, SNP info file       ##
####################################################################
#################################################################################
##       Output from this file: Processed covariates, only with entries        ##
##          relevant to CVD[covProcessed.rds], Biomarkers dataset with         ##
##                   well labelled columns and only one entry                  ##
##                  over time (not imputed)[bioProcessed.rds],                 ##
##                     same biomarkers dataset but imputed                     ##
##          through MICE imputation[bioImputed.rds], biomarker dataset         ##
##                   with only complete cases [bioMCAR.rds],                   ##
##   biomarker preprocessed with all columns (30 columns)[bioUnfiltered.rds]   ##
#################################################################################
###########################################################################
###########################################################################
###                                                                     ###
###                         PACKAGE DECLARATION                         ###
###                                                                     ###
###########################################################################
###########################################################################
if (!require(devtools)) install.packages('devtools')
library(devtools)
if (!require(remotes)) install.packages('remotes')
library(remotes)
if (!require(ggbiplot)) install_github("vqv/ggbiplot")
library(ggbiplot)
if (!require(GGally)) install_github("GGally")
library(GGally)
if (!require(tidyverse)) install.packagaes("tidyverse")
library(tidyverse)
if (!require(naniar)) install.packages("naniar")
library(naniar)
if (!require(factoextra)) install.packages("factoextra")
library(factoextra)
if (!require(ggfortify)) install.packages("ggfortify")
library(ggfortify)
if (!require(stats)) install.packages("stats")
library(stats)
if (!require(mice)) install.packages('mice')
library(mice)
if (!require(DMwR)) install.packages('DMwR')
library(DMwR)
if (!require(impute)) BiocManager::install("impute")
library(impute)
library(parallel)
cores = detectCores()
############################################################################
############################################################################
###                                                                      ###
###                             DATA LOADING                             ###
###                                                                      ###
############################################################################
############################################################################
##################################################################
##                        Cluster add-in                        ##
##################################################################
cluster = 1
t0 = Sys.time()
platform = Sys.info()['sysname']
if (cluster == 1 & platform == "Linux"){
cov.original = readRDS("../FULLDATA/Covariates_full.rds")
bio.original= readRDS("../FULLDATA/Biomarkers_full.rds")
bio.dict = readxl::read_xlsx("../Biomarker_annotation.xlsx")
cov.dict = readxl::read_xlsx("../Covariate_dictionary.xlsx")
snp.original = readRDS('../FULLDATA/genetic_data_cvd_snps.rds')
snp_info.original = readxl::read_xlsx("../SNP_info.xlsx")
# id's into columnss, not doing this anymore
# rownames(bio.original) = bio.original$`mydata$eid`
# bio.original = bio.original[,-1]
# setting up ID column
colnames(bio.original)[1] = 'ID'
cov.original = cbind(ID = rownames(cov.original), cov.original)
snp.original = cbind(ID = rownames(snp.original), snp.original)
cov.original$ID = as.numeric(levels(cov.original$ID)[cov.original$ID])
snp.original$ID = as.numeric(levels(snp.original$ID)[snp.original$ID])
save_path = "../FULLDATA/preprocessed/"
} else {
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#################################################################
##                      Original datasets                      ##
#################################################################
cov.original = readRDS("../data/Covars_toy.rds")
bio.original= readRDS("../data/Biomarkers_toy.rds")
bio.dict = readxl::read_xlsx("../Biomarker_annotation.xlsx")
cov.dict = readxl::read_xlsx("../Covariate_dictionary.xlsx")
snp.original = readRDS('../data/Genes_toy.rds')
snp_info.original = readxl::read_xlsx("../SNP_info.xlsx")
bio.original = cbind(ID = 1:nrow(bio.original), bio.original)
cov.original = cbind(ID = 1:nrow(cov.original), cov.original)
snp.original = cbind(ID = 1:nrow(snp.original), snp.original)
save_path = "../data/preprocessed/"
}
##################################################################
##              Changing biomarkers codes by names              ##
##################################################################
#make nicely looking names (programmingly functional)
colnames(bio.dict) = make.names(colnames(bio.dict), unique=TRUE)
bio = bio.original
View(bio)
substring(colnames(bio)[-1],2,6)
bio.dict$UK.Biobank.Field
colnames(bio)[-1] = bio.dict$Biomarker.name[
match(substring(colnames(bio)[-1],2,6),bio.dict$UK.Biobank.Field)]
View(bio)
colnames(bio)[-1] = make.names(colnames(bio)[-1], unique=TRUE)
View(bio)
colnames(bio)[-1] = sub("\\.\\.",".", colnames(bio)[-1])
View(bio)
# safety-check for all vars being numeric
stopifnot(all(apply(bio, 2, is.numeric)))
install_github("lc5415/HDATDS")
?HDATDS
library(HDATDS)
?HDATDS
?renameBio
data("bio.example")
devtools::document()
setwd("~/OneDrive - Imperial College London/ExtratimeWork/HDATDS")
devtools::document()
install_github("lc5415/HDATDS")
getwd()
devtools::document()
library(devtools)
install_github("lc5415/HDATDS")
library(HDATDS)
data("bio.original_example")
# format names
bio = formatBio(bio.original, measurement = "first")
# alternatively
# data("bio.example")
# Load Covariates data frames (bio and cov) and merge them by ID
bio = merge(bio, cov[,c("ID","age_cl","gender")], by = "ID")
ids = bio$ID # keeping explicit copy of IDs
rownames(bio) = bio[,1] # assuming ID is the first column
bio = bio[,-1]
bio$age_cl = as.factor(bio$age_cl)
bio$gender = as.factor(bio$gender)
# Run BHS calculation using paper reference
scores_paper = BHSCalculator(bio, "Paper", stratified = T, bySystems = T)
dplyr::%>5
dplyr::%>%
devtools::load_all()
data("bio.original_example")
# format names
bio = formatBio(bio.original, measurement = "first")
# alternatively
# data("bio.example")
# Load Covariates data frames (bio and cov) and merge them by ID
bio = merge(bio, cov[,c("ID","age_cl","gender")], by = "ID")
ids = bio$ID # keeping explicit copy of IDs
rownames(bio) = bio[,1] # assuming ID is the first column
bio = bio[,-1]
bio$age_cl = as.factor(bio$age_cl)
bio$gender = as.factor(bio$gender)
# Run BHS calculation using paper reference
scores_paper = BHSCalculator(bio, "Paper", stratified = T, bySystems = T)
devtools::load_all()
data("bio.original_example")
# format names
bio = formatBio(bio.original, measurement = "first")
# alternatively
# data("bio.example")
# Load Covariates data frames (bio and cov) and merge them by ID
bio = merge(bio, cov[,c("ID","age_cl","gender")], by = "ID")
ids = bio$ID # keeping explicit copy of IDs
rownames(bio) = bio[,1] # assuming ID is the first column
bio = bio[,-1]
bio$age_cl = as.factor(bio$age_cl)
bio$gender = as.factor(bio$gender)
# Run BHS calculation using paper reference
scores_paper = BHSCalculator(bio, "Paper", stratified = T, bySystems = T)
library(magrittr)
magrittr::`%>%`
devtools::install_github("lc5415"HDATDS)
devtools::install_github("lc5415/HDATDS")
library("HDATDS")
?BHSCalculator
devtools::install_github("lc5415/HDATDS")
library("HDATDS")
?BHSCalculator
load_all()
?BHSCalculator
?BHSCalculator
