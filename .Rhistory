cov <- as.matrix(cov)
HDATDS::Analysis("svm", cov)
# Installing and Loading Packages -----------------------------------------
if (!require(xgboost)) install_github("xgboost")
library(xgboost)
if (!require(readr)) install_github("readr")
library(readr)
if (!require(stringr)) install.packagaes("stringr")
library(stringr)
if (!require(caret)) install.packages("caret")
library(caret)
if (!require(car)) install.packages("car")
library(car)
library(tidyverse)
# for auc calculation
library(ModelMetrics)
# for svm
library(e1071)
# Setting up our environment ----------------------------------------------
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Load Data
cov = readRDS("../data/preprocessed/covProcessed.rds")
bio = readRDS("../data/preprocessed/bioImputed.rds")
snp = readRDS("../data/preprocessed/snpImputed.rds")
# Preparing our Data and selecting features -------------------------------
# One stumbling block when getting started with the xgboost package in R is
# that you can't just pass it a dataframe. The core xgboost function requires data to be a matrix.
#To prepare our data, we have a number of steps we need to complete:
#remove information about the target variable from the training data
#reduce the amount of redundant information
#convert categorical information to a numeric format
#Split dataset into training and testing subsets
#Convert the cleaned dataframe to a Dmatrix
# Remove information about the target variable from the training d --------
#First let's remove the columns that have information on our target variable
#Let's create a new vector with labels - convert the CVD_status factor to an
# integer class starting at 0, as the first class should be 0; picky requirement
cov$CVD_status = as.integer(cov$CVD_status)
cov <- cov %>% # we will leave CVD_stattus in cov and let it be split in the
# analysis function so that the sampling can be done and order is kept
select(-c("vit_status","dc_cvd_st","age_cl", "stop","stop_cvd",
"age_CVD", "cvd_final_icd10", "primary_cause_death_ICD10",
"cvd_death", "cvd_incident", "cvd_prevalent"))
# Reduce the amount of redundant information ------------------------------
#Finally, I want to remove all the non-numeric variables,
# since a matrix can only hold numeric variables - if you try to create a
# matrix from a dataframe with non-numeric variables in it, it will
# conver them all into NA's and give you some warning messages.
# Luis: we want to keep ordered categorical variables as integers but OneHotEncoding
# on non-ordered categorical variables (e.g. smok_ever, physical activity) only those
# 2 surprisingly
cov$smok_ever_2 = as.factor(cov$smok_ever_2)
cov$physical_activity_2 = as.factor(cov$physical_activity_2)
onehotvars = dummyVars("~.", data = cov[,c("smok_ever_2","physical_activity_2")])
onehotvars = data.frame(predict(onehotvars, newdata = cov[,c("smok_ever_2",
"physical_activity_2")]))
# Delete one hot encoded variables and add the encoded versions
cov = cov %>% select(-c(smok_ever_2,physical_activity_2)) %>% cbind(onehotvars)
# remove onehot vars for memory management
remove(onehotvars)
cov$smok_ever_2 = as.factor(cov$smok_ever_2)
cov$physical_activity_2 = as.factor(cov$physical_activity_2)
onehotvars = dummyVars("~.", data = cov[,c("smok_ever_2","physical_activity_2")])
onehotvars = data.frame(predict(onehotvars, newdata = cov[,c("smok_ever_2",
"physical_activity_2")]))
#Load Data
cov = readRDS("../data/preprocessed/covProcessed.rds")
bio = readRDS("../data/preprocessed/bioImputed.rds")
snp = readRDS("../data/preprocessed/snpImputed.rds")
#Let's create a new vector with labels - convert the CVD_status factor to an
# integer class starting at 0, as the first class should be 0; picky requirement
cov$CVD_status = as.integer(cov$CVD_status)
#Let's create a new vector with labels - convert the CVD_status factor to an
# integer class starting at 0, as the first class should be 0; picky requirement
cov$CVD_status = as.integer(cov$CVD_status)
cov <- cov %>% # we will leave CVD_stattus in cov and let it be split in the
# analysis function so that the sampling can be done and order is kept
select(-c("vit_status","dc_cvd_st","age_cl", "stop","stop_cvd",
"age_CVD", "cvd_final_icd10", "primary_cause_death_ICD10",
"cvd_death", "cvd_incident", "cvd_prevalent"))
cov$smok_ever_2 = as.factor(cov$smok_ever_2)
cov$physical_activity_2 = as.factor(cov$physical_activity_2)
onehotvars = dummyVars("~.", data = cov[,c("smok_ever_2","physical_activity_2")])
onehotvars = data.frame(predict(onehotvars, newdata = cov[,c("smok_ever_2",
"physical_activity_2")]))
# Delete one hot encoded variables and add the encoded versions
cov = cov %>% select(-c(smok_ever_2,physical_activity_2)) %>% cbind(onehotvars)
# remove onehot vars for memory management
remove(onehotvars)
apply(cov, 2, is.character)
apply(cov, 2, class)
apply(cov, 2, typeof)
apply(cov[1,:], 2, typeof)
apply(cov[1,], 2, typeof)
typeof(cov%ID)
typeof(cov$ID)
apply(cov, 2, typeof)
sapply(cov, 2, typeof)
sapply(cov, typeof)
sapply(cov, typeof)=="character"
load_al
load_all
load_all()
setwd("~/OneDrive - Imperial College London/ExtratimeWork/HDATDS")
load_all
load_all()
# Installing and Loading Packages -----------------------------------------
if (!require(xgboost)) install_github("xgboost")
library(xgboost)
if (!require(readr)) install_github("readr")
library(readr)
if (!require(stringr)) install.packagaes("stringr")
library(stringr)
if (!require(caret)) install.packages("caret")
library(caret)
if (!require(car)) install.packages("car")
library(car)
library(tidyverse)
# for auc calculation
library(ModelMetrics)
# for svm
library(e1071)
# Setting up our environment ----------------------------------------------
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Load Data
cov = readRDS("../data/preprocessed/covProcessed.rds")
bio = readRDS("../data/preprocessed/bioImputed.rds")
snp = readRDS("../data/preprocessed/snpImputed.rds")
# Preparing our Data and selecting features -------------------------------
# One stumbling block when getting started with the xgboost package in R is
# that you can't just pass it a dataframe. The core xgboost function requires data to be a matrix.
#To prepare our data, we have a number of steps we need to complete:
#remove information about the target variable from the training data
#reduce the amount of redundant information
#convert categorical information to a numeric format
#Split dataset into training and testing subsets
#Convert the cleaned dataframe to a Dmatrix
# Remove information about the target variable from the training d --------
#First let's remove the columns that have information on our target variable
#Let's create a new vector with labels - convert the CVD_status factor to an
# integer class starting at 0, as the first class should be 0; picky requirement
cov$CVD_status = as.integer(cov$CVD_status)
cov <- cov %>% # we will leave CVD_stattus in cov and let it be split in the
# analysis function so that the sampling can be done and order is kept
select(-c("vit_status","dc_cvd_st","age_cl", "stop","stop_cvd",
"age_CVD", "cvd_final_icd10", "primary_cause_death_ICD10",
"cvd_death", "cvd_incident", "cvd_prevalent"))
# Reduce the amount of redundant information ------------------------------
#Finally, I want to remove all the non-numeric variables,
# since a matrix can only hold numeric variables - if you try to create a
# matrix from a dataframe with non-numeric variables in it, it will
# conver them all into NA's and give you some warning messages.
# Luis: we want to keep ordered categorical variables as integers but OneHotEncoding
# on non-ordered categorical variables (e.g. smok_ever, physical activity) only those
# 2 surprisingly
cov$smok_ever_2 = as.factor(cov$smok_ever_2)
cov$physical_activity_2 = as.factor(cov$physical_activity_2)
onehotvars = dummyVars("~.", data = cov[,c("smok_ever_2","physical_activity_2")])
onehotvars = data.frame(predict(onehotvars, newdata = cov[,c("smok_ever_2",
"physical_activity_2")]))
# Delete one hot encoded variables and add the encoded versions
cov = cov %>% select(-c(smok_ever_2,physical_activity_2)) %>% cbind(onehotvars)
# remove onehot vars for memory management
remove(onehotvars)
Analysis("svm",cov)
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
Analysis("svm",cov)
plot(ROCR::performance(pred.objct, "tpr", "fpr"))
pred.objct
performance(pred.objct, "tpr", "fpr")
ROCR::performance(pred.objct, "tpr", "fpr")
plot(ROCR::performance(pred.objct, "tpr", "fpr"))
cov$CVD_status = as.factor(cov$CVD_status)
cov$CVD_status = as.factor(cov$CVD_status)
Analysis("svm",cov)
# Installing and Loading Packages -----------------------------------------
if (!require(xgboost)) install_github("xgboost")
library(xgboost)
if (!require(readr)) install_github("readr")
library(readr)
if (!require(stringr)) install.packagaes("stringr")
library(stringr)
if (!require(caret)) install.packages("caret")
library(caret)
if (!require(car)) install.packages("car")
library(car)
library(tidyverse)
# for auc calculation
library(ModelMetrics)
# for svm
library(e1071)
# Setting up our environment ----------------------------------------------
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Load Data
cov = readRDS("../data/preprocessed/covProcessed.rds")
bio = readRDS("../data/preprocessed/bioImputed.rds")
snp = readRDS("../data/preprocessed/snpImputed.rds")
# Preparing our Data and selecting features -------------------------------
# One stumbling block when getting started with the xgboost package in R is
# that you can't just pass it a dataframe. The core xgboost function requires data to be a matrix.
#To prepare our data, we have a number of steps we need to complete:
#remove information about the target variable from the training data
#reduce the amount of redundant information
#convert categorical information to a numeric format
#Split dataset into training and testing subsets
#Convert the cleaned dataframe to a Dmatrix
# Remove information about the target variable from the training d --------
#First let's remove the columns that have information on our target variable
#Let's create a new vector with labels - convert the CVD_status factor to an
# integer class starting at 0, as the first class should be 0; picky requirement
cov$CVD_status = as.integer(cov$CVD_status)
cov <- cov %>% # we will leave CVD_stattus in cov and let it be split in the
# analysis function so that the sampling can be done and order is kept
select(-c("vit_status","dc_cvd_st","age_cl", "stop","stop_cvd",
"age_CVD", "cvd_final_icd10", "primary_cause_death_ICD10",
"cvd_death", "cvd_incident", "cvd_prevalent"))
# Reduce the amount of redundant information ------------------------------
#Finally, I want to remove all the non-numeric variables,
# since a matrix can only hold numeric variables - if you try to create a
# matrix from a dataframe with non-numeric variables in it, it will
# conver them all into NA's and give you some warning messages.
# Luis: we want to keep ordered categorical variables as integers but OneHotEncoding
# on non-ordered categorical variables (e.g. smok_ever, physical activity) only those
# 2 surprisingly
cov$smok_ever_2 = as.factor(cov$smok_ever_2)
cov$physical_activity_2 = as.factor(cov$physical_activity_2)
onehotvars = dummyVars("~.", data = cov[,c("smok_ever_2","physical_activity_2")])
onehotvars = data.frame(predict(onehotvars, newdata = cov[,c("smok_ever_2",
"physical_activity_2")]))
# Delete one hot encoded variables and add the encoded versions
cov = cov %>% select(-c(smok_ever_2,physical_activity_2)) %>% cbind(onehotvars)
# remove onehot vars for memory management
remove(onehotvars)
Analysis("svm",cov)
plot(ROCR::performance(pred.objct, "tpr", "fpr"))
install.packages("ROCR")
install.packages("ROCR")
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
Analysis("svm",cov)
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
library(devtools)
load_all()
setwd("~/OneDrive - Imperial College London/ExtratimeWork/HDATDS")
load_all()
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
Analysis("svm",cov)
obj = ROCR::performance(pred.objct, "tpr", "fpr")
Analysis("svm",cov)
obj = ROCR::performance(pred.objct, "tpr", "fpr")
View(obj)
plot(obj@x.values, obj@y.values)
plot(unlist(obj@x.values), unlist(obj@y.values))
plot(obj)
library(ROCR)
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
library(ROCR)
Analysis("svm",cov)
plot(performance)
Analysis("svm",cov)
setwd("~/OneDrive - Imperial College London/ExtratimeWork/HDATDS")
load_all
load_all()
# Installing and Loading Packages -----------------------------------------
if (!require(xgboost)) install_github("xgboost")
library(xgboost)
if (!require(readr)) install_github("readr")
library(readr)
if (!require(stringr)) install.packagaes("stringr")
library(stringr)
if (!require(caret)) install.packages("caret")
library(caret)
if (!require(car)) install.packages("car")
library(car)
library(tidyverse)
# for auc calculation
library(ModelMetrics)
# for svm
library(e1071)
# Setting up our environment ----------------------------------------------
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Load Data
cov = readRDS("../data/preprocessed/covProcessed.rds")
bio = readRDS("../data/preprocessed/bioImputed.rds")
snp = readRDS("../data/preprocessed/snpImputed.rds")
# Preparing our Data and selecting features -------------------------------
# One stumbling block when getting started with the xgboost package in R is
# that you can't just pass it a dataframe. The core xgboost function requires data to be a matrix.
#To prepare our data, we have a number of steps we need to complete:
#remove information about the target variable from the training data
#reduce the amount of redundant information
#convert categorical information to a numeric format
#Split dataset into training and testing subsets
#Convert the cleaned dataframe to a Dmatrix
# Remove information about the target variable from the training d --------
#First let's remove the columns that have information on our target variable
#Let's create a new vector with labels - convert the CVD_status factor to an
# integer class starting at 0, as the first class should be 0; picky requirement
cov$CVD_status = as.integer(cov$CVD_status)
cov <- cov %>% # we will leave CVD_stattus in cov and let it be split in the
# analysis function so that the sampling can be done and order is kept
select(-c("vit_status","dc_cvd_st","age_cl", "stop","stop_cvd",
"age_CVD", "cvd_final_icd10", "primary_cause_death_ICD10",
"cvd_death", "cvd_incident", "cvd_prevalent"))
# Reduce the amount of redundant information ------------------------------
#Finally, I want to remove all the non-numeric variables,
# since a matrix can only hold numeric variables - if you try to create a
# matrix from a dataframe with non-numeric variables in it, it will
# conver them all into NA's and give you some warning messages.
# Luis: we want to keep ordered categorical variables as integers but OneHotEncoding
# on non-ordered categorical variables (e.g. smok_ever, physical activity) only those
# 2 surprisingly
cov$smok_ever_2 = as.factor(cov$smok_ever_2)
cov$physical_activity_2 = as.factor(cov$physical_activity_2)
onehotvars = dummyVars("~.", data = cov[,c("smok_ever_2","physical_activity_2")])
onehotvars = data.frame(predict(onehotvars, newdata = cov[,c("smok_ever_2",
"physical_activity_2")]))
# Delete one hot encoded variables and add the encoded versions
cov = cov %>% select(-c(smok_ever_2,physical_activity_2)) %>% cbind(onehotvars)
# remove onehot vars for memory management
remove(onehotvars)
Analysis("svm", cov)
?plot
?xgb.cv
setwd("~/OneDrive - Imperial College London/ExtratimeWork/HDATDS")
load_all()
Analysis("svm", cov)
document()
load_all()
Analysis("svm", cov)
Analysis("glm", cov)
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
Analysis("glm", cov)
glmnet::cv.glmnet(X.train, y.train, foldid = folds, type.measure = "auc")
glmnet::cv.glmnet(X.train, y.train, foldid = folds,
type.measure = "auc", family = "binomial")
?cv.glmnet
typeof(y.train)
class(y.train)
Analysis("glm", cov)
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
Analysis("glm", cov)
glmnet::cv.glmnet(X.train, y.train, foldid = folds,
type.measure = "auc", family = "binomial")
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
Analysis("glm", cov)
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
Analysis("glm", cov)
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
Analysis("glm", cov)
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
Analysis("glm", cov)
cov = cov[complete.cases(cov),]
load_all\
load_all()
Analysis("glm", cov)
Analysis("glm", cov)
?cv.glmnet
colSums(is.na(X))
colSums(is.na(y))
View(X)
typeof(X)
typeof(X.train)
class(X.train)
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
Analysis("glm", cov)
dim(as.matrix(X.train))
mat = as.matrix(X.train)
line = as.numeric(X.train)
line = as.numeric(mat)
mat = data.matrix(X.train)
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
Analysis("glm", cov)
source('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
Analysis("glm", cov)
Analysis("svm", cov)
Analysis("xgboost", cov)
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
Analysis("xgboost", cov)
source('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
Analysis("xgboost", cov)
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
Analysis("xgboost", cov)
xgboost::xgb.cv(data = train, folds = folds, nrounds = nround, objective = "binary:logistic",
metrics = list("auc"), eta = eta, max_depth = max_depth, verbose = F)
?xgb.cv
Q
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
load()
load_all()
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
Analysis("xgboost", cov)
fold.ids <- unique(cov$ID)
custom.folds <- vector("list", length(fold.ids))
i <- 1
for( id in fold.ids){
custom.folds[[i]] <- which( cov$ID %in% id )
i <- i+1
}
filds = custom.folds <- caret::createFolds(data$Label, k=10, list=T)
filds = caret::createFolds(data$Label, k=10, list=T)
which(folds == 1)
Analysis("xgboost", cov)
which(fols == 1)
which(folds == 1)
## set up for CV
folds <- cut(seq(1,nrow(X.train)),breaks=5,labels=FALSE)
which(folds == 1)
xgb.folds = list()
for (i in 1:kfolds){
xgb.folds[i] = which(folds==i)
}
kfolds = 5
xgb.folds = list()
for (i in 1:kfolds){
xgb.folds[i] = which(folds==i)
}
Q
load_all()
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
load_all()
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
load_all()
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
Analysis("xgboost", cov)
Analysis("xgboost", cov)
View(xgb.folds)
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
Analysis("xgboost", cov)
View(xgb.folds)
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
Analysis("xgboost", cov)
which(folds==i)
i
1:kfolds
Q
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
Q
Analysis("xgboost", cov)
which(folds==fold.id)
View(xgb.folds)
xgb.folds[i] = which(folds==fold.id)
n[i] = folds==1
gyh = list()
gyh[i] = folds==1
xgb.folds[[i]] = list(which(folds==fold.id))
View(xgb.folds)
Q
Analysis("xgboost", cov)
Q
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
Analysis("xgboost", cov)
source('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
Analysis("xgboost", cov)
load_all()
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
Analysis("xgboost", cov)
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
load_all()
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
Analysis("xgboost", cov)
Analysis("xgboost", cov)
load_all()
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
Analysis("xgboost", cov)
Analysis("xgboost", cov)
xgboost::xgb.cv(data = train, folds = xgb.folds, nrounds = nround, objective = "binary:logistic",
metrics = list("auc"), eta = eta, max_depth = max_depth, verbose = F)
View(xgb.folds)
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
Analysis("xgboost", cov)
View(xgb.folds)
xgb.folds = list()
for (fold.id in 1:kfolds){
xgb.folds[[length(xgb.folds)+1]] = which(folds==fold.id)
}
# nrounds is basically number of trees in forest
# this is basically a grid search
best_auc = 0
best_eta = 0
debugSource('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
Analysis("xgboost", cov)
View(xgb.folds)
xgb.folds[[2]]
View(xgb.folds)
Q
source('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
Analysis("xgboost", cov)
source('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
Analysis("xgboost", cov)
load_all)
load_all()
Analysis("xgboost", cov)
source('~/OneDrive - Imperial College London/ExtratimeWork/HDATDS/R/PerformanceSearch.R', echo=TRUE)
Analysis("xgboost", cov)
document()
library(devtools)
getwd()
document()
library(devtools)
use_package("magrittr")
documnet
document()
